<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-4.0.xsd">
	
	<!-- 缓存自动扫描 -->
	<!-- <context:component-scan base-package="com.video" /> -->
	
	<!-- 引入配置文件 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:db.properties</value>
				<value>classpath:redis.properties</value>
			</list>
		</property>
	</bean>
	
	<!-- 配置数据库 -->
	<context:property-placeholder location="classpath:db.properties"/>
	
	<!-- 配置缓存 -->
	<context:property-placeholder location="classpath:redis.properties" ignore-unresolvable="true"/>
	
	<!-- c3p0 配置数据库连接池参数 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
	    <property name="driverClass" value="${jdbc.driver}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="maxPoolSize" value="30" />
		<property name="minPoolSize" value="5" />
		<property name="initialPoolSize" value="6" />
		<property name="checkoutTimeout" value="1000"/>
		<property name="acquireRetryAttempts" value="2"/>
		<property name="maxIdleTime" value="1800"/>
		<property name="idleConnectionTestPeriod" value="18000"/>
	</bean>
	<!-- 配置sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	    <!-- 注入数据库连接池 -->
	    <property name="dataSource" ref="dataSource" />
		<!-- 配置myBatis全局配置文件 -->
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<!-- 扫描实体类包 -->
		<property name="typeAliasesPackage" value="com.video.*.entity"/>
		<!-- 扫描映射文件xml类型的接口文件 -->
		<property name="mapperLocations" value="classpath:com/video/*/dao/impl/*.xml"/>
	</bean>
	<!-- 配置扫描dao包，实现dao接口的动态注入spring -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.video.*.dao"/>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	
	<!-- 缓存配置 -->
	
	<!-- redis数据源 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">  
	    <property name="maxIdle" value="${redis.maxIdle}" />  
	    <property name="maxTotal" value="${redis.maxActive}" />  
	    <property name="maxWaitMillis" value="${redis.maxWait}" />  
	    <property name="testOnBorrow" value="${redis.testOnBorrow}" />
	    <property name="testOnReturn" value="${redis.testOnReturn}" />  
	</bean>
	
	<!-- jedis客户端配置 -->
	<!-- <bean id="jedisPool" class="redis.clients.jedis.JedisPool">
        <constructor-arg index="0" ref="jedisPoolConfig"/>
        <constructor-arg index="1" value="${redis.host}"/>
        <constructor-arg index="2" value="${redis.port}" type="int"/>
        <constructor-arg index="3" value="${redis.timeout}" type="int"/>
        <constructor-arg name="password" value="#{'${redis.password}'!=''?'${redis.password}':null}" />
    </bean> -->
    
	<!-- Spring-redis连接池管理工厂 -->
	<bean id="jedisConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
		p:host-name="${redis.host}" p:port="${redis.port}" p:password="${redis.pass}"
		p:pool-config-ref="jedisPoolConfig" />
		
	<!-- 使用中间类解决RedisCache.jedisConnectionFactory的静态注入，从而使MyBatis实现第三方缓存 -->
	<bean id="redisCacheTransfer" class="com.video.cache.RedisCacheTransfer">
	    <property name="jedisConnectionFactory" ref="jedisConnectionFactory"/>
	</bean>
	
	<bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate" >    
        <property name="connectionFactory" ref="jedisConnectionFactory" />    
        <!--如果不配置Serializer，那么存储的时候缺省使用String，如果用User类型存储，那么会提示错误User can't cast to String！！  -->    
        <property name="keySerializer" >    
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />    
        </property>    
        <property name="valueSerializer" >    
            <bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer" />    
        </property>    
        <property name="hashKeySerializer">    
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>    
        </property>    
        <property name="hashValueSerializer">    
            <bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>    
        </property>    
        <!--开启事务  -->  
        <property name="enableTransactionSupport" value="true"></property>  
    </bean >    
</beans>